// Generated by Dagger (https://dagger.dev).
package com.androidexam.stayfinder.data.repositories;

import com.androidexam.stayfinder.data.services.AccountRemoteService;
import com.google.firebase.auth.FirebaseAuth;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AccountRepository_Factory implements Factory<AccountRepository> {
  private final Provider<AccountRemoteService> accountRemoteServiceProvider;

  private final Provider<FirebaseAuth> firebaseAuthProvider;

  public AccountRepository_Factory(Provider<AccountRemoteService> accountRemoteServiceProvider,
      Provider<FirebaseAuth> firebaseAuthProvider) {
    this.accountRemoteServiceProvider = accountRemoteServiceProvider;
    this.firebaseAuthProvider = firebaseAuthProvider;
  }

  @Override
  public AccountRepository get() {
    return newInstance(accountRemoteServiceProvider.get(), firebaseAuthProvider.get());
  }

  public static AccountRepository_Factory create(
      Provider<AccountRemoteService> accountRemoteServiceProvider,
      Provider<FirebaseAuth> firebaseAuthProvider) {
    return new AccountRepository_Factory(accountRemoteServiceProvider, firebaseAuthProvider);
  }

  public static AccountRepository newInstance(AccountRemoteService accountRemoteService,
      FirebaseAuth firebaseAuth) {
    return new AccountRepository(accountRemoteService, firebaseAuth);
  }
}
